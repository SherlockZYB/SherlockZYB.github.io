<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://sherlockzyb.github.io</id>
    <title>周飞飞のblog</title>
    <updated>2021-03-01T11:03:22.889Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://sherlockzyb.github.io"/>
    <link rel="self" href="http://sherlockzyb.github.io/atom.xml"/>
    <subtitle>我们的征途是——星辰大海！</subtitle>
    <logo>http://sherlockzyb.github.io/images/avatar.png</logo>
    <icon>http://sherlockzyb.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 周飞飞のblog</rights>
    <entry>
        <title type="html"><![CDATA[周飞飞的Gridea MarkDown语法初探！😎]]></title>
        <id>http://sherlockzyb.github.io/post/zhou-fei-fei-de-gridea-markdown-yu-fa-chu-tan/</id>
        <link href="http://sherlockzyb.github.io/post/zhou-fei-fei-de-gridea-markdown-yu-fa-chu-tan/">
        </link>
        <updated>2021-02-27T09:23:19.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>👻在开始进行博客写作之前打算先学好与Gridea兼容的MarkDown语法，并形成自己写作的一套体系deisi！</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>👻在开始进行博客写作之前打算先学好与Gridea兼容的MarkDown语法，并形成自己写作的一套体系deisi！</p>
</blockquote>
<!-- more -->
<h2 id="一-标题">一、标题！</h2>
<p>嘛，一篇好的文章当然少不了一个大写的标题，在MarkDown语法中，想要创造标题很简单：<br>
<strong>在标题名称前面添加#，几级标题就添加几个#，最后在#与标题名称之间添加一个空格就完成啦！</strong></p>
<h2 id="二-段落">二、段落！</h2>
<p>感觉用MarkDown写作的段落区别于我们常用的手写方式，是不需要在每段前面加空格和缩进什么的哦：<br>
<strong>只需要在两个段落间放一个空白行就足够啦！</strong><br>
实例：<br>
就像</p>
<p>这样！</p>
<h2 id="三-强调">三、强调！</h2>
<p>强调就是将文字进行常用的粗体、斜体以及粗体+斜体处理啦：<br>
<strong>粗体和斜体的设置需要用到*，在想要强调的文字<em>前后</em>添加一个*就可以使其变为斜体，添加两个*就可以使其变为粗体，而三个*就是粗体+斜体啦！</strong><br>
实例：<br>
<em>强调</em> <strong>强调</strong> <em><strong>强调</strong></em></p>
<h2 id="四-引用">四、引用！</h2>
<p>引用就是将文字进行虚化处理：<br>
<strong>引用需要用到的符号为&gt;，在要引用的句子前添加&lt;就可以了，句子本身并不需要添加引号；引用可嵌套，在第二层引用的句子前添加&gt;&gt;即可，以此类推；引用后的内容可以拥有其他MarkDown格式的元素</strong><br>
实例：</p>
<blockquote>
<p>周飞飞说：<br>
<em>哈哈</em></p>
<blockquote>
<p><strong>哈哈哈哈</strong></p>
<blockquote>
<p><em><strong>哈哈哈哈哈哈</strong></em></p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="五列表">五：列表！</h2>
<p>列表就是将一组元素进行有序或无序的排列：<br>
<strong>有序列表需要在元素前方用到1. 的形式，而无序列表只需要使用 - 就够了，但别忘了空格哦~</strong><br>
实例：</p>
<ol>
<li>第一
<ol>
<li>第一点一</li>
<li>第一点二</li>
</ol>
</li>
<li>第二<br>
哈哈哈哈</li>
</ol>
<ul>
<li>第一
<blockquote>
<p>哈哈哈哈</p>
</blockquote>
</li>
<li>第二<br>
哈哈哈哈</li>
</ul>
<h2 id="六-代码">六、代码！</h2>
<p>果然作为程序员就不能离开代码，代码中的单词或句段可以通过虚化底凸显出来0 0：<br>
<strong>在需要进行虚化底凸显的代码前后添加反引号 ` 即可，如果代码段中本身包含 ` ，则可以使用两个 `;需要注意的是使用缩进也会形成代码段</strong><br>
实例：<br>
周飞飞<code>赛高</code>！<br>
<code>周飞飞`赛高`!</code></p>
<h2 id="七-分隔线">七、分隔线！</h2>
<p>古人有云：”距离产生美deisi!“，所以在不同部分之间添加分隔线是很有必要滴！：<br>
<strong>分隔线的使用只需要在不同内容之间留一行放上三个*就足够啦！</strong><br>
实例：<br>
周飞飞</p>
<hr>
<p>牛逼！</p>
<h2 id="八-链接">八、链接！</h2>
<p>互联网是张大网，链接就是联通到各个区域的丝线：<br>
<strong>使用链接需要采用[超链接显示名](超链接地址 &quot;超链接title&quot;)的格式，要注意超链接title一定是用的英文字符中的引号；使用&lt;&gt;可以轻易地将邮箱或是url转换为链接地址；链接同样可以使用强调的MarkDown格式</strong><br>
实例：<br>
我所学的所有MarkDown知识都来源于<a href="https://markdown.com.cn" title="这个网站真的很棒！">MarkDown语法</a><br>
我的Qq邮箱是<a href="mailto:1015462621@qq.com">1015462621@qq.com</a><br>
<strong><a href="sherlockzyb.github.io">我喜欢你</a></strong><br>
<a href="sherlockzyb.github.io"><code>我也喜欢你</code></a></p>
<h2 id="九-图片">九、图片！</h2>
<p>图片是博客的灵魂呀：<br>
<strong>要添加图像，请使用感叹号 !。图片的格式与链接类似，在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。但似乎Gridea可以直接添加图片</strong><br>
实例：<br>
<img src="http://sherlockzyb.github.io/post-images/1614475669895.jpg" alt="一瓶银河" title="一瓶银河" loading="lazy"></p>
<h2 id="十-内嵌html标签">十、内嵌HTML标签</h2>
<p>使用HTML标签可以丰富文档的格式：<br>
<strong>需要注意的是在HTML格式中不能再使用MarkDown格式，并且区块标签需要使用空格来与正文进行区分</strong><br>
实例：<br>
This <em>word</em> is italic.</p>
<h2 id="十一-markdown扩展语法">十一、MarkDown扩展语法</h2>
<p>删除线：**在要删除的语段前后各添加两个 ~ **<br>
实例：<s>周飞飞喜欢邵佳薇</s> 周飞飞喜欢过邵佳薇</p>
<p>任务列表：<strong>在任务列表前添加 - [] 的形式，中间选择使用x来判定是否选择</strong><br>
实例：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8026854"><label class="task-list-item-label" for="task-item-8026854"> 是</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1052478"><label class="task-list-item-label" for="task-item-1052478"> 否</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[周飞飞的C#学习笔记    #Day 1]]></title>
        <id>http://sherlockzyb.github.io/post/zhou-fei-fei-de-cxue-xi-ri-zhi-day-1/</id>
        <link href="http://sherlockzyb.github.io/post/zhou-fei-fei-de-cxue-xi-ri-zhi-day-1/">
        </link>
        <updated>2021-02-27T08:59:48.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>🤗🤗🤗<em>今天是周飞飞学习C#的第一天！</em></p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>🤗🤗🤗<em>今天是周飞飞学习C#的第一天！</em></p>
</blockquote>
<!-- more -->
<h2 id="今日重点">今日重点：</h2>
<h3 id="1-c的程序结构"><a href="https://www.runoob.com/csharp/csharp-program-structure.html">1. C#的程序结构</a></h3>
<ul>
<li><strong>命名空间声明（Namespace declaration）</strong></li>
<li>class 声明</li>
<li>Class 方法</li>
<li>Class 属性</li>
<li>一个 Main 方法：Main方法是程序的入口</li>
<li>语句（Statements）&amp; 表达式（Expressions）</li>
<li>注释</li>
</ul>
<h3 id="2-c的基本语法"><a href="https://www.runoob.com/csharp/csharp-basic-syntax.html">2. C#的基本语法</a></h3>
<ul>
<li>关键字</li>
</ul>
<h3 id="3-c的数据类型与类型转换"><a href="https://www.runoob.com/csharp/csharp-data-types.html">3. C#的数据类型与类型转换</a></h3>
<ul>
<li><strong>对象（Object）类型</strong>：当一个值类型转换为对象类型时，则被称为 装箱；另一方面，当一个对象类型转换为值类型时，则被称为 拆箱。</li>
<li><strong>动态（Dynamic）类型</strong>：态类型与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的。</li>
<li>字符串类型：<strong>@字符串</strong></li>
</ul>
<h3 id="4-c的变量与常量"><a href="https://www.runoob.com/csharp/csharp-variables.html">4. C#的变量与常量</a></h3>
<ul>
<li>常量的声明及引用</li>
</ul>
<h3 id="5-c的运算符-判断-循环"><a href="https://www.runoob.com/csharp/csharp-operators.html">5. C#的运算符、判断、循环</a></h3>
<ul>
<li>与C/C++相仿</li>
</ul>
<h3 id="6-c的封装"><a href="https://www.runoob.com/csharp/csharp-encapsulation.html">6. C#的封装</a></h3>
<ul>
<li>类的默认访问标识符是 internal，成员的默认访问标识符是 private。</li>
<li><strong>internal与public的区别在于internal不可跨文件</strong></li>
</ul>
<h3 id="7-c的方法"><a href="https://www.runoob.com/csharp/csharp-methods.html">7. C#的方法</a></h3>
<ul>
<li><strong>在 C# 中，使用 ref 关键字声明引用参数</strong></li>
<li><strong>在 C# 中，使用 out 关键字声明输出参数</strong>：提供给输出参数的变量不需要赋值。当需要从一个参数没有指定初始值的方法中返回值时，输出参数特别有用。</li>
</ul>
<h3 id="8-c可空类型"><a href="https://www.runoob.com/csharp/csharp-nullable.html">8. C#可空类型</a></h3>
<ul>
<li>可空类型可以表示其基础值类型正常范围内的值，再加上一个 null 值。</li>
<li>可空类型声明语法：<strong>&lt; data_type&gt; ? &lt;variable_name&gt; = null;</strong></li>
<li><strong>C# 中??运算符的作用是判断??左边的对象是否为 null，如果不为 null 则使用 ?? 左边的对象，如果为 null 则使用 ?? 右边的对象。</strong></li>
</ul>
<h3 id="9-c数组"><a href="https://www.runoob.com/csharp/csharp-array.html">9. C#数组</a></h3>
<ul>
<li>数组声明语法：<strong>datatype[] arrayName;</strong></li>
<li>数组的初始化需要用到new关键字，如double[] balance = new double[10];</li>
<li><strong>使用foreach来遍历数组中的元素</strong></li>
</ul>
<pre><code class="language-C#">foreach (int j in n ) // n 是一个带有 10 个整数的数组
{
    int i = j-100;
    Console.WriteLine(&quot;Element[{0}] = {1}&quot;, i, j);
}
</code></pre>
<ul>
<li><strong>区别C#中的<a href="https://www.runoob.com/csharp/csharp-multi-dimensional-arrays.html">二维数组[,]</a>与<a href="https://www.runoob.com/csharp/csharp-jagged-arrays.html">交错数组[][]</a></strong>：C#中的二维数组更像矩阵，而C/C++中的二维数组更像是C#中的交错数组；交错数组与二维数组的区别，可以直观的理解为交错数组每一行的长度是可以不一样的。</li>
<li><strong><a href="https://www.runoob.com/csharp/csharp-passing-arrays-to-functions.html">传递数组作为参数的方法</a></strong></li>
<li><a href="https://www.runoob.com/csharp/csharp-param-arrays.html">参数数组</a>params 关键字，参数数组通常用于传递未知数量的参数给函数。</li>
<li><em>使用<a href="https://www.runoob.com/csharp/csharp-array-class.html">Array类</a>来对数组进行处理</em></li>
</ul>
<h2 id="今日练习">今日练习：</h2>
<details><summary>展开查看</summary>
<pre><code>using System;

namespace StudyFirstDay
{
    class ConvertType   //数据类型的转换
    {
        public void Change()
        {
            int i = 1;
            double j = 2.13;
            bool k = true;
            string l = &quot;ABBBBBBB&quot;;
            Console.WriteLine(i.ToString());
            Console.WriteLine(j.ToString());
            Console.WriteLine(k.ToString());
            Console.WriteLine(&quot;{0}&quot;,l.ToLower());
        }
    }

    class Circle  //程序的基本语法学习
    {
        private double radis;
        public void AcceptDetails()
        {
            radis = Convert.ToDouble(Console.ReadLine());
        }

        public double GetArea()
        {
            return radis * radis * 3.14;
        }

        public void Display()
        {
            Console.WriteLine(&quot;radis:{0}&quot;, radis);
            Console.WriteLine(&quot;area:{0}&quot;, GetArea());
        }

        public void Getsize()  //用于获取各种数据类型的size
        {
            Console.WriteLine(&quot;Int:{0}&quot;, sizeof(int));
            Console.WriteLine(&quot;Double:{0}&quot;, sizeof(double));
            Console.WriteLine(&quot;Float:{0}&quot;, sizeof(float));
        }

        public void Swap(ref int x,ref int y)  //使用引用时，改变形参的同时也会改变实参
        {
            int temp = x;
            x = y;
            y = temp;
        }

        public void Getvalue(out int x,out int y)    //使用输出来达到在同一方法中输出多个参数的目的
        {
            x = 233;
            y = 666;
        }
    }

    class SampleClass
    {
        public const int c1 = 5;  
        public const int c2 = c1 + 5;   //必须公有才能被类外引用
        public SampleClass()     //注意此处在声明构造函数时，没有声明返回值的类型
        {
            //空函数
        }
    }

    class ExcuteCircle
    {
        static void Main(string[] args)
        {
            int a1 = 5, a2 = 10;
            SampleClass s = new SampleClass();
            ConvertType p = new ConvertType();
            Circle r = new Circle();
            //r.AcceptDetails();
            //r.GetArea();
            //r.Display();
            //r.Getsize();
            //p.Change();
            // Console.WriteLine(&quot;c1={0},c2={1}&quot;, SampleClass.c1, SampleClass.c2);//注意，此处引用不能用s.c1,s.c2，因为c1，c2是常量
            //r.Swap(ref a1,ref a2); Console.WriteLine(&quot;{0},{1}&quot;,a1,a2);//别忘了此处也需要传递关键字ref
            r.Getvalue(out a1,out a2); Console.WriteLine(&quot;{0},{1}&quot;, a1, a2); //别忘了此处也需要传递关键字out
            Console.ReadKey();

        }
    }
}
</code></pre>
</details>
<h2 id="今日总结">今日总结：</h2>
<p>总的来说今天大致完成了C#菜鸟教程前一半的内容，但是考虑到难度递增，因此可能后一半的内容会花好几天的时间去学习与消化。</p>
<p>今天的收获主要在于对C#的基础有了基本的掌握，用粗体标注出了我认为的重难点，之后复习时可以参考着进行。然后对于数组这一部分，只是浅尝辄止，没有进行相应的练习，也没有深入地挖掘其发散的知识点，打算在以后用到数组时再返回来仔细地学习一番。</p>
<p>以上<br>
明天也要好好加油呀！🚀🚀🚀</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[你好！朋友]]></title>
        <id>http://sherlockzyb.github.io/post/about/</id>
        <link href="http://sherlockzyb.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<!-- more -->
<h2 id="关于本站">🏠 关于本站</h2>
<p>本站用于周飞飞记录与小娇妻的幸福生活，以及发布学习摘要~</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>周飞飞，四川大学2019级本科生，计算机科学与技术专业</p>
<h2 id="项目经历">🎫 项目经历</h2>
<p>基于PEO模型下老年人跌倒模拟与风险评估的虚拟仿真实验平台开发<br>
“随心分”——基于卷积神经网络的垃圾识别分类鼓励app</p>
<h2 id="兴趣爱好">⛹  兴趣爱好</h2>
<p>辩论，主持，演讲，❤邵佳薇❤</p>
<h2 id="联系我呀">📬 联系我呀</h2>
<p>邮箱：1015462621@qq.com<br>
电话：13667602676<br>
QQ：1015462621<br>
Twitter：Zhouflyflying@gmail.com</p>
]]></content>
    </entry>
</feed>